# Discord Suggestion System Documentation

## Overview

This suggestion system allows users to submit suggestions to Discord servers with voting, categorization, status tracking, and admin management features. The system uses MongoDB for data storage and provides both user and admin commands.

## User Commands

### Basic Suggestion Submission

#### `/suggest submit`
Submit a suggestion with the following parameters:
- **suggestion_text** (required): Your suggestion content (max 2000 characters)
- **anonymous** (optional): Submit anonymously (default: false)
- **category** (optional): Choose from Bot Feature, Server Improvement, Event Idea, Rule Change, or Other

**Example:**
```
/suggest submit suggestion_text:"Add a music bot" anonymous:false category:"Bot Feature"
```


#### `/suggest template`
Use pre-built templates for structured suggestions:
- **Bot Feature**: For requesting new bot functionality
- **Server Rule**: For proposing rule changes
- **Event Proposal**: For suggesting server events
- **Channel Request**: For requesting new channels

Templates include guided fields for title, description, use case, and priority rating.

### Finding Suggestions

#### `/suggest search`
Search through existing suggestions with filters:
- **query** (optional): Search terms to find in suggestion text
- **category** (optional): Filter by category (All, Bot Feature, Server Improvement, etc.)
- **status** (optional): Filter by status (Pending, Under Review, Approved, etc.)
- **author** (optional): Filter by suggestion author (mention user)

**Example:**
```
/suggest search query:"music bot" category:"Bot Feature" status:"Pending"
```


#### `/suggest mine`
View your own suggestion history (shown privately to you only). Displays:
- Suggestion status and category
- Shortened suggestion ID (first 8 characters)
- Text preview
- Vote counts

## Voting System

Each suggestion displays interactive buttons for community voting:

- **üëç Upvote**: Show support for the suggestion
- **üëé Downvote**: Express disagreement
- **‚ù§Ô∏è Love**: Show strong enthusiasm
- **ü§î Thinking**: Indicate the suggestion needs more consideration

**Voting Rules:**
- Users can only vote once per suggestion
- Clicking the same vote type removes your vote
- Changing vote types updates your previous vote
- Vote counts update in real-time on the suggestion embed

## Suggestion Lifecycle

### Status Types
1. **Pending**: Newly submitted suggestions awaiting review
2. **Under Review**: Being evaluated by administrators
3. **Approved**: Accepted for implementation
4. **Implemented**: Successfully completed
5. **Rejected**: Not approved with reason provided
6. **On Hold**: Temporarily paused

### Categories
- **Bot Feature**: Requests for new bot functionality
- **Server Improvement**: General server enhancements
- **Event Idea**: Suggestions for server events
- **Rule Change**: Proposed rule modifications
- **Other**: Miscellaneous suggestions

## Features

### Duplicate Detection
The system checks for similar suggestions when submitting and gives you the option to:
- Continue with submission anyway
- Cancel to avoid duplicates

### Discussion Threads
Each suggestion automatically creates a discussion thread for community conversation.

### Notifications
Users receive direct messages when their suggestion status changes (unless they have DMs disabled).

### Anonymous Submissions
Users can submit suggestions anonymously to encourage honest feedback without fear of judgment.

## Admin Commands

### Status Management

#### `/suggestion-admin status`
Update suggestion status (requires Manage Guild permission):
- **suggestion_id**: First 8 characters of the suggestion ID
- **status**: New status to set
- **reason** (optional): Explanation for the status change

### Analytics

#### `/suggestion-admin stats`
View comprehensive statistics including:
- Total suggestion count
- Status distribution
- Category breakdown
- Top contributors

#### `/suggestion-admin export`
Export all suggestions in CSV or JSON format for analysis or backup.

## Database Structure

The system uses MongoDB with the following collections:
- **Suggestions**: Main suggestion data
- **Votes**: User voting records
- **UserStats**: User activity statistics
- **NotificationQueue**: Pending status notifications

## Best Practices

### For Users
- Be specific and detailed in suggestions
- Check existing suggestions before submitting
- Use appropriate categories
- Participate in discussions constructively

### For Administrators
- Review suggestions regularly
- Provide clear reasons for status changes
- Monitor community voting patterns
- Export data periodically for backups

## Technical Features

- **Persistent Views**: Vote buttons remain functional after bot restarts
- **Cooldown Protection**: 30-second cooldown on suggestion submissions
- **Error Handling**: Graceful error management with user-friendly messages
- **Performance Optimization**: Database indexes for fast searching
- **Notification System**: Automated status update notifications

This system provides a comprehensive solution for gathering, organizing, and managing community feedback in Discord servers.